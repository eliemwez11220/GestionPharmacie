<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Prescription extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Prescription_model');
    } 

    /*
     * Listing of prescriptions
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('prescription/index?');
        $config['total_rows'] = $this->Prescription_model->get_all_prescriptions_count();
        $this->pagination->initialize($config);

        $data['prescriptions'] = $this->Prescription_model->get_all_prescriptions($params);
        
        $data['_view'] = 'prescription/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new prescription
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('posologie','Posologie','required');
		$this->form_validation->set_rules('mode_emploi','Mode Emploi','required');
		$this->form_validation->set_rules('quantite_total','Quantite Total','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'numero_ordonance' => $this->input->post('numero_ordonance'),
				'produit_prescrit' => $this->input->post('produit_prescrit'),
				'posologie' => $this->input->post('posologie'),
				'mode_emploi' => $this->input->post('mode_emploi'),
				'quantite_total' => $this->input->post('quantite_total'),
            );
            
            $prescription_id = $this->Prescription_model->add_prescription($params);
            redirect('prescription/index');
        }
        else
        {
            $data['all_intrants'] = $this->Educazad_model->get_multiple('tb_im_produits', array(), 'tb_im_produits.intrant_id','DESC');

			$this->load->model('Ordonance_model');
			$data['all_ordonances'] = $this->Ordonance_model->get_all_ordonances();

			$this->load->model('Produit_model');
			$data['all_medicaments'] = $this->Produit_model->get_all_medicaments();
            
            $data['_view'] = 'prescription/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a prescription
     */
    function edit($prescrip_id)
    {   
        // check if the prescription exists before trying to edit it
        $data['prescription'] = $this->Prescription_model->get_prescription($prescrip_id);
        
        if(isset($data['prescription']['prescrip_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('posologie','Posologie','required');
			$this->form_validation->set_rules('mode_emploi','Mode Emploi','required');
			$this->form_validation->set_rules('quantite_total','Quantite Total','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'numero_ordonance' => $this->input->post('numero_ordonance'),
					'produit_prescrit' => $this->input->post('produit_prescrit'),
					'posologie' => $this->input->post('posologie'),
					'mode_emploi' => $this->input->post('mode_emploi'),
					'quantite_total' => $this->input->post('quantite_total'),
                );

                $this->Prescription_model->update_prescription($prescrip_id,$params);            
                redirect('prescription/index');
            }
            else
            {
				 $data['all_intrants'] = $this->Educazad_model->get_multiple('tb_im_produits', array(), 'tb_im_produits.intrant_id','DESC');

                $this->load->model('Ordonance_model');
                $data['all_ordonances'] = $this->Ordonance_model->get_all_ordonances();

                $this->load->model('Produit_model');
                $data['all_medicaments'] = $this->Produit_model->get_all_medicaments();

                $data['_view'] = 'prescription/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The prescription you are trying to edit does not exist.');
    } 

    /*
     * Deleting prescription
     */
    function remove($prescrip_id)
    {
        $prescription = $this->Prescription_model->get_prescription($prescrip_id);

        // check if the prescription exists before trying to delete it
        if(isset($prescription['prescrip_id']))
        {
            $this->Prescription_model->delete_prescription($prescrip_id);
            redirect('prescription/index');
        }
        else
            show_error('The prescription you are trying to delete does not exist.');
    }
    
}
